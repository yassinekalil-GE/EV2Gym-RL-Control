#!/usr/bin/env python3
"""
Script d'installation automatique de Gurobi pour EV2Gym

Installe Gurobi et configure la licence pour utiliser les agents MPC optimaux.
"""

import subprocess
import sys
import os
import requests
import zipfile
from pathlib import Path
import webbrowser

def print_banner():
    """Affiche la banni√®re"""
    print("üéØ Installation Gurobi pour EV2Gym")
    print("=" * 40)
    print("Gurobi est requis pour les agents MPC optimaux:")
    print("- OCMF_V2G (Optimal Charging Management)")
    print("- eMPC_V2G (Economic Model Predictive Control)")
    print("- V2GProfitMax (Oracle optimal)")
    print("=" * 40)

def install_gurobipy():
    """Installe le package Python Gurobi"""
    print("üì¶ Installation de gurobipy...")
    
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "gurobipy"])
        print("‚úÖ gurobipy install√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation: {e}")
        return False

def check_gurobi_installation():
    """V√©rifie si Gurobi est install√© et fonctionnel"""
    try:
        import gurobipy as gp
        print("‚úÖ gurobipy import√© avec succ√®s")
        
        # Tester la cr√©ation d'un mod√®le
        try:
            model = gp.Model("test")
            model.dispose()
            print("‚úÖ Licence Gurobi valide - Mod√®le de test cr√©√©")
            return True, "valid_license"
        except gp.GurobiError as e:
            if "No license" in str(e) or "license" in str(e).lower():
                print("‚ö†Ô∏è  gurobipy install√© mais licence manquante")
                return True, "no_license"
            else:
                print(f"‚ö†Ô∏è  Erreur Gurobi: {e}")
                return True, "error"
    except ImportError:
        print("‚ùå gurobipy non install√©")
        return False, "not_installed"

def get_academic_license_info():
    """Affiche les informations pour obtenir une licence acad√©mique"""
    print("\nüéì Licence Acad√©mique Gurobi (GRATUITE)")
    print("=" * 45)
    print("1. Cr√©ez un compte sur: https://www.gurobi.com/academia/")
    print("2. V√©rifiez votre statut acad√©mique avec votre email universitaire")
    print("3. T√©l√©chargez la licence acad√©mique")
    print("4. Placez le fichier gurobi.lic dans ce r√©pertoire")
    print("\nüí° La licence acad√©mique est gratuite et permet:")
    print("   - Mod√®les jusqu'√† 2000 variables")
    print("   - Parfait pour la recherche et l'√©ducation")
    print("   - Utilisation sur un seul ordinateur")

def get_commercial_license_info():
    """Affiche les informations pour une licence commerciale"""
    print("\nüíº Licence Commerciale Gurobi")
    print("=" * 35)
    print("1. Visitez: https://www.gurobi.com/products/gurobi-optimizer/")
    print("2. Demandez un essai gratuit de 30 jours")
    print("3. Ou achetez une licence compl√®te")
    print("\nüí∞ Options commerciales:")
    print("   - Essai gratuit 30 jours")
    print("   - Licence nomm√©e utilisateur")
    print("   - Licence flottante pour √©quipes")

def setup_license_file():
    """Guide pour configurer le fichier de licence"""
    print("\nüìÑ Configuration du Fichier de Licence")
    print("=" * 42)
    
    # V√©rifier si le fichier existe d√©j√†
    license_files = [
        "gurobi.lic",
        Path.home() / "gurobi.lic",
        Path.home() / ".gurobi" / "gurobi.lic"
    ]
    
    existing_license = None
    for license_file in license_files:
        if Path(license_file).exists():
            existing_license = license_file
            break
    
    if existing_license:
        print(f"‚úÖ Fichier de licence trouv√©: {existing_license}")
        
        # Copier vers le r√©pertoire local si n√©cessaire
        local_license = Path("gurobi.lic")
        if not local_license.exists() and existing_license != local_license:
            try:
                import shutil
                shutil.copy2(existing_license, local_license)
                print(f"‚úÖ Licence copi√©e vers: {local_license}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Impossible de copier la licence: {e}")
        
        return True
    else:
        print("‚ùå Aucun fichier de licence trouv√©")
        print("\nüìã √âtapes pour configurer la licence:")
        print("1. Obtenez votre fichier gurobi.lic")
        print("2. Placez-le dans l'un de ces emplacements:")
        for location in license_files:
            print(f"   - {location}")
        print("3. Relancez ce script pour v√©rifier")
        
        return False

def test_mpc_agents():
    """Teste les agents MPC avec Gurobi"""
    print("\nüß™ Test des Agents MPC")
    print("=" * 25)
    
    try:
        # Tester l'import des agents MPC
        sys.path.append("EV2Gym")
        
        try:
            from ev2gym.baselines.mpc.ocmf_mpc import OCMF_V2G
            print("‚úÖ OCMF_V2G import√©")
        except ImportError as e:
            print(f"‚ùå OCMF_V2G: {e}")
        
        try:
            from ev2gym.baselines.mpc.eMPC_v2 import eMPC_V2G_v2
            print("‚úÖ eMPC_V2G import√©")
        except ImportError as e:
            print(f"‚ùå eMPC_V2G: {e}")
        
        try:
            from ev2gym.baselines.mpc.V2GProfitMax import V2GProfitMaxOracle
            print("‚úÖ V2GProfitMax import√©")
        except ImportError as e:
            print(f"‚ùå V2GProfitMax: {e}")
        
        print("\nüéâ Agents MPC pr√™ts √† utiliser!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def create_gurobi_test_script():
    """Cr√©e un script de test Gurobi"""
    test_script = """
import gurobipy as gp
from gurobipy import GRB

def test_gurobi():
    try:
        # Cr√©er un mod√®le simple
        model = gp.Model("test_ev_charging")
        
        # Variables de test (puissance de charge)
        charge_power = model.addVar(lb=0, ub=11, name="charge_power")
        
        # Fonction objectif simple
        model.setObjective(charge_power, GRB.MAXIMIZE)
        
        # Optimiser
        model.optimize()
        
        if model.status == GRB.OPTIMAL:
            print(f"‚úÖ Test Gurobi r√©ussi!")
            print(f"   Solution optimale: {charge_power.x:.2f} kW")
            return True
        else:
            print(f"‚ö†Ô∏è  Statut d'optimisation: {model.status}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de test: {e}")
        return False
    finally:
        if 'model' in locals():
            model.dispose()

if __name__ == "__main__":
    test_gurobi()
"""
    
    with open("test_gurobi.py", "w") as f:
        f.write(test_script)
    
    print("üìù Script de test cr√©√©: test_gurobi.py")

def main():
    """Fonction principale"""
    print_banner()
    
    # V√©rifier l'installation actuelle
    installed, status = check_gurobi_installation()
    
    if not installed:
        print("\nüì¶ Installation de gurobipy...")
        if not install_gurobipy():
            print("‚ùå √âchec de l'installation")
            return
        
        # Rev√©rifier apr√®s installation
        installed, status = check_gurobi_installation()
    
    if status == "valid_license":
        print("\nüéâ Gurobi est compl√®tement configur√©!")
        
        # Tester les agents MPC
        if test_mpc_agents():
            print("\n‚úÖ Tous les agents MPC sont pr√™ts!")
            print("\nüöÄ Vous pouvez maintenant utiliser:")
            print("   - OCMF_V2G pour l'optimisation V2G")
            print("   - eMPC_V2G pour le contr√¥le √©conomique")
            print("   - V2GProfitMax pour la solution optimale")
        
    elif status == "no_license":
        print("\nüìÑ Configuration de la licence requise...")
        
        if not setup_license_file():
            print("\nüéì Options pour obtenir une licence:")
            
            choice = input("\nChoisissez une option:\n1) Licence acad√©mique (gratuite)\n2) Licence commerciale\n3) Continuer sans Gurobi\nVotre choix (1-3): ")
            
            if choice == "1":
                get_academic_license_info()
                webbrowser.open("https://www.gurobi.com/academia/")
            elif choice == "2":
                get_commercial_license_info()
                webbrowser.open("https://www.gurobi.com/products/gurobi-optimizer/")
            else:
                print("\n‚ö†Ô∏è  Continuez avec les agents heuristiques uniquement")
                print("   (ChargeAsFastAsPossible, RandomAgent, RoundRobin)")
    
    # Cr√©er un script de test
    create_gurobi_test_script()
    
    print("\nüìã R√©sum√©:")
    print(f"   gurobipy: {'‚úÖ' if installed else '‚ùå'}")
    print(f"   Licence: {'‚úÖ' if status == 'valid_license' else '‚ùå'}")
    print(f"   Agents MPC: {'‚úÖ' if status == 'valid_license' else '‚ùå'}")
    
    if status != "valid_license":
        print("\nüí° Pour activer les agents MPC:")
        print("   1. Obtenez une licence Gurobi")
        print("   2. Placez gurobi.lic dans ce r√©pertoire")
        print("   3. Relancez ce script")
    
    input("\nAppuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()
